name: Build & Deploy 4uFleet (Container)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_CLIENT_ID:        ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID:        ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID:  ${{ vars.AZURE_SUBSCRIPTION_ID }}

  ACR_NAME:               ${{ vars.ACR_NAME }}
  ACR_LOGIN_SERVER:       ${{ vars.ACR_LOGIN_SERVER }}
  IMAGE_NAME:             ${{ vars.IMAGE_NAME }}
  RESOURCE_GROUP:         ${{ vars.RESOURCE_GROUP }}
  WEBAPP_NAME:            ${{ vars.WEBAPP_NAME }}

  # Tag estável em uso no WebApp
  TAG_STABLE:             v2025-09-20-acs

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure jq (just in case)
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Log in to ACR (AAD)
        run: az acr login -n "$ACR_NAME"

      - name: Build & push image to ACR (stable + latest + sha)
        env:
          IMAGE: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
          SHA_TAG: ${{ github.sha }}
          DOCKER_BUILDKIT: 1
        run: |
          set -euo pipefail
          echo "Building $IMAGE with tags: $TAG_STABLE, latest, $SHA_TAG"

          docker build \
            -t "$IMAGE:$TAG_STABLE" \
            -t "$IMAGE:latest" \
            -t "$IMAGE:$SHA_TAG" \
            .

          docker push "$IMAGE:$TAG_STABLE"
          docker push "$IMAGE:latest"
          docker push "$IMAGE:$SHA_TAG"

      - name: Show ACR tags (sanity check)
        run: az acr repository show-tags -n "$ACR_NAME" --repository "$IMAGE_NAME" -o table | tail -n +1

      # Lê linuxFxVersion (ex.: DOCKER|4ufleetacr.azurecr.io/4ufleet-api:v2025-09-20-acs)
      # e garante que o WebApp aponte para TAG_STABLE; se não, ajusta automaticamente.
      - name: Ensure WebApp uses TAG_STABLE (auto-fix if needed)
        env:
          IMAGE: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
        run: |
          set -euo pipefail
          FX=$(az webapp config container show -g "$RESOURCE_GROUP" -n "$WEBAPP_NAME" --query linuxFxVersion -o tsv || echo "")
          if [ -z "$FX" ]; then
            echo "❌ linuxFxVersion vazio no WebApp. Verifique se é Linux/Container."
            az webapp config container show -g "$RESOURCE_GROUP" -n "$WEBAPP_NAME" -o jsonc || true
            exit 1
          fi

          CURR_IMG="${FX#DOCKER|}"
          echo "linuxFxVersion atual: $FX"
          echo "Imagem atual: $CURR_IMG"

          TARGET_IMG="$IMAGE:$TAG_STABLE"

          if [ "$CURR_IMG" = "$TARGET_IMG" ]; then
            echo "✅ WebApp já aponta para $TARGET_IMG"
          else
            echo "⚠️ WebApp aponta para $CURR_IMG — ajustando para $TARGET_IMG ..."
            az webapp config container set \
              -g "$RESOURCE_GROUP" -n "$WEBAPP_NAME" \
              --docker-custom-image-name "$TARGET_IMG" \
              --docker-registry-server-url "https://$ACR_LOGIN_SERVER"
            echo "✅ Ajustado para $TARGET_IMG"
          fi

      - name: Restart App Service (pull layers)
        run: az webapp restart -g "$RESOURCE_GROUP" -n "$WEBAPP_NAME"

      - name: Show WebApp container config (post-restart)
        run: az webapp config container show -g "$RESOURCE_GROUP" -n "$WEBAPP_NAME" -o jsonc
