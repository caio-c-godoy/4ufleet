name: Build & Deploy 4uFleet (Container)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      tag_stable:
        description: "Tag estável que o WebApp usa (ex.: v2025-09-20-acs)"
        required: false
        default: "v2025-09-20-acs"

permissions:
  id-token: write
  contents: read

env:
  # Azure OIDC / Sub
  AZURE_CLIENT_ID:        ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID:        ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID:  ${{ vars.AZURE_SUBSCRIPTION_ID }}

  # Infra
  ACR_NAME:               ${{ vars.ACR_NAME }}           # ex: 4ufleetacr
  ACR_LOGIN_SERVER:       ${{ vars.ACR_LOGIN_SERVER }}   # ex: 4ufleetacr.azurecr.io
  IMAGE_NAME:             ${{ vars.IMAGE_NAME }}         # ex: 4ufleet-api
  RESOURCE_GROUP:         ${{ vars.RESOURCE_GROUP }}     # ex: RG_RENT_CAR
  WEBAPP_NAME:            ${{ vars.WEBAPP_NAME }}        # ex: 4ufleet-api

  # Tag estável que o WebApp consome (mantemos SEMPRE a mesma)
  TAG_STABLE:             ${{ github.event.inputs.tag_stable || 'v2025-09-20-acs' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Sanity env
        run: |
          set -e
          echo "ACR: $ACR_NAME"
          echo "ACR_LOGIN_SERVER: $ACR_LOGIN_SERVER"
          echo "IMAGE_NAME: $IMAGE_NAME"
          echo "TAG_STABLE: $TAG_STABLE"
          test -n "$TAG_STABLE"

      - name: ACR Login (AAD)
        run: az acr login -n "$ACR_NAME"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (stable + latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.TAG_STABLE }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # cache é opcional; ative se quiser acelerar builds:
          cache-from: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Show ACR tags (sanity check)
        run: |
          az acr repository show-tags -n "$ACR_NAME" --repository "$IMAGE_NAME" --orderby time_desc -o table | head -n 20

      # Mantemos o WebApp apontando para a TAG_STABLE (já configurada).
      # Reiniciar força o pull das camadas novas dessa mesma tag.
      - name: Restart App Service
        run: az webapp restart -g "$RESOURCE_GROUP" -n "$WEBAPP_NAME"

      - name: Show WebApp container config
        run: |
          az webapp config container show -g "$RESOURCE_GROUP" -n "$WEBAPP_NAME" -o jsonc
          echo "Esperado: DOCKER|${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.TAG_STABLE }}"
